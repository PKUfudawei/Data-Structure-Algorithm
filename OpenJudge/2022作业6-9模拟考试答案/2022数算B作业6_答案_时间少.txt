****001: Radar Installation
----author:2100012601张辰芃,46ms
from math import sqrt

try:
    casen = 0
    while True:
        error_level = 0
        casen += 1
        intervals = []
        n, d = (map(int, input().split()))
        for _ in range(n):
            x, y = (map(float, input().split()))
            t = d - y
            if t >= 0:
                tmp = sqrt(d*d - y*y)
                intervals.append([x - tmp, x + tmp])
            else:
                error_level = 1
        if error_level == 0:
            intervals = sorted(intervals, key=lambda x: x[0])
            uncovered_end = intervals[0][1]
            num_radar = 0
            for i in range(1, n):
                if intervals[i][0] <= uncovered_end:
                    uncovered_end = min(uncovered_end, intervals[i][1])
                else:
                    num_radar += 1
                    uncovered_end = intervals[i][1]
            print("Case "+str(casen)+": "+str(num_radar+1))
            input()
        else:
            print("Case "+str(casen)+": -1")
            input()
except IndexError:
    pass


----author:1800010759,47ms
from math import sqrt


def solution(lattice, d):
    dist = []
    for x, y in lattice:
        if y > d:
            return -1
        r = sqrt(d**2 - y**2)
        dist.append((x-r, x+r))
    dist.sort(key=lambda x: x[0])
    ans = 0
    ddl = dist[0][1]
    for start, end in dist:
        if ddl < start:
            ans += 1
            ddl = end
        else:
            ddl = min(ddl, end)
    ans += 1
    return ans


num = 1
while True:
    lattice = []
    n, d = map(int, input().split())
    if n == d == 0:
        break
    for _ in range(n):
        lattice.append([int(i) for i in input().split()])
    ans = solution(lattice, d)
    print(f"Case {num}: {ans}")
    input()
    num += 1

----author:艾佳皓 2100010637,47ms
from math import sqrt
t=1
while True:
    n,d=map(int,input().split())
    if n!=0 or d!=0:
        m=[]
        g=0
        for i in range(n):
            x,y=map(int,input().split())
            if d>=y:
                z=sqrt(d*d-y*y)
                m.append([x-z,x+z])
            elif d<y:
                g=1
        a=input()        
        if g==1:
            print('Case %d: -1'%t)
        else:
            m.sort(key=lambda x:x[0])
            count=1
            p=0
            k=m[0][1]
            while p<n-1:
                if m[p+1][0]<=k:
                    k=min(k,m[p+1][1])
                    p+=1
                else:
                    count+=1
                    p+=1
                    k=m[p][1]
            print('Case %d: %d'%(t,count)) 
        t+=1           
    else:break

****002: 二叉查找树的lower_bound和upper_bound
----author:2100011631,1089ms
class TreeNode: #节点类
	#father在删除节点的时候有用,以及找一个节点的后继节点的时候有用
	def __init__(self,key,val,father=None,left=None,right=None):
		self.key,self.val,self.left,self.right ,self.father \
			= key,val,left,right,father
	def isLeftChild(self):
		return self.father and self.father.left == self
	def isRightChild(self):
		return self.father and self.father.right == self
class Tree:
	def __init__(self,NodeType = TreeNode,less=lambda x,y:x<y ):
		self.root,self.size = None,0 #root是树根，size是节点总数
		self.less = less #less是比较函数,
		self.NodeType = NodeType #NodeType是节点类型
	def __find(self,key,root): #私有方法，不宜也不易直接访问
		if self.root == None:
			return None
		if self.less(key,root.key):
			if root.left:
				return self.__find(key,root.left)
			else:
				return None
		elif self.less(root.key,key):
			if root.right:
				return self.__find(key,root.right)
			else:
				return None
		else:
			return root
	def insert(self,key,val): #插入节点 #modi
		if self.root == None:
			self.root = self.NodeType(key,val)
			self.size += 1
		else:
			if self.__inserter(key,val,self.root):
				self.size += 1
	def __inserter(self,key,val,root): #modi
		if self.less(key,root.key) :
			if root.left == None:
				root.left = self.NodeType(key, val,root) #root是father
				return True
			else:
				return self.__inserter(key,val,root.left)
		elif self.less(root.key,key):
			if root.right == None:
				root.right = self.NodeType(key,val,root)
				return True
			else:
				return self.__inserter(key,val,root.right)
		else:
			root.val = val  #相同关键字，则更新
			return False
	def findMin(self): #寻找最小节点  #modi
		if self.root == None:
			return None
		nd = self.__findMin(self.root)
		return (nd.key,nd.val)
	def __findMin(self,root):
		if root.left == None:
			return root
		else:
			return self.__findMin(root.left )
	def __findMax(self,root):
		if root.right == None:
			return root
		else:
			return self.__findMax(root.right)
	def pop(self,key):
		#删除键为key的元素，返回该元素的值。如果没有这样的元素，则引发异常
		nd = self.__find(key,self.root)
		if nd == None:
			raise Exception("key not found")
		else:
			self.size -= 1
			self.__deleteNode(nd)
	def __deleteNode(self,nd): #删除节点nd
		if nd.left and nd.right: #左右子树都有
			minNd = self.__findMin(nd.right)
			nd.key,nd.val = minNd.key,minNd.val
			self.__deleteNode(minNd)
		elif nd.left:	#只有左子树
			if nd.isLeftChild():
				nd.father.left = nd.left
				nd.left.father = nd.father
			elif nd.isRightChild():
				nd.father.right = nd.left
				nd.left.father = nd.father
			else: #是树根
				self.root = nd.left
				self.root.father = None
		elif nd.right : #只有右子树
			if nd.isRightChild():
				nd.father.right = nd.right
				nd.right.father = nd.father
			elif nd.isLeftChild():
				nd.father.left = nd.right
				nd.right.father = nd.father
			else:
				self.root = nd.right
				self.root.father = None
		else: #nd是叶子
			if nd.isLeftChild():
				nd.father.left = None
			elif nd.isRightChild():
				nd.father.right = None
			else:
				self.root = None
	def inorderTravelSeq(self): #中序遍历生成器
		if self.root == None:
			return
		stack = [[self.root,0]] #0表示self的左子树还没有遍历过
		while len(stack) > 0:
			node = stack[-1]
			if node[0] == None: #node[0]是树节点
				stack.pop()
				continue
			if node[1] == 0: #左子树还没有遍历过
				node[1] = 1
				stack.append([node[0].left,0])
			elif node[1] == 1: #左子树已经遍历过
				yield (node[0].key,node[0].val)
				node[1] = 2
				stack.append([node[0].right, 0])
			else: #右子树也遍历完了
				stack.pop()
	def __contains__(self, key):
		return self.__find(key,self.root) != None
	def __iter__(self): #返回迭代器
		return self.inorderTravelSeq()
	def __getitem__(self,key):
		nd = self.__find(key,self.root)
		if nd == None:
			raise Exception("key not found")
		else:
			return nd.val
	def __setitem__(self, key, value): #
		nd = self.__find(key,self.root)
		if nd == None:
			self.insert(key,value)
		else:
			nd.val = value
	def lowersearch(self,root,key):
		bound=[None,None]
		while root :
			if key>root.key :
				bound[0]=(root.key,root.val)
				root=root.right
			else :
				root=root.left
		return bound[0]
	def uppersearch(self,root,key):
		bound=[None,None]
		while root :
			if key<root.key :
				bound[0]=(root.key,root.val)
				root=root.left
			else :
				root=root.right
		return bound[0]

	def lower_bound(self,key):
		return self.lowersearch(self.root,key)
	def upper_bound(self,key):
		return self.uppersearch(self.root,key)
tree = Tree()
while True:
	try:
		s = input().split()
		if s[0] == "ADD":
			tree[int(s[1])] = int(s[1])
		elif s[0] == "LB":
			print(tree.lower_bound(int(s[1])))
		elif s[0] == "UB":
			print(tree.upper_bound(int(s[1])))
	except:
		break

----author:1900015431(YawnSean),1102ms
class TreeNode: #节点类
	#father在删除节点的时候有用,以及找一个节点的后继节点的时候有用
	def __init__(self,key,val,father=None,left=None,right=None):
		self.key,self.val,self.left,self.right ,self.father \
			= key,val,left,right,father
	def isLeftChild(self):
		return self.father and self.father.left == self
	def isRightChild(self):
		return self.father and self.father.right == self
class Tree:
	def __init__(self,NodeType = TreeNode,less=lambda x,y:x<y ):
		self.root,self.size = None,0 #root是树根，size是节点总数
		self.less = less #less是比较函数,
		self.NodeType = NodeType #NodeType是节点类型
	def __find(self,key,root): #私有方法，不宜也不易直接访问
		if self.root == None:
			return None
		if self.less(key,root.key):
			if root.left:
				return self.__find(key,root.left)
			else:
				return None
		elif self.less(root.key,key):
			if root.right:
				return self.__find(key,root.right)
			else:
				return None
		else:
			return root
	def insert(self,key,val): #插入节点 #modi
		if self.root == None:
			self.root = self.NodeType(key,val)
			self.size += 1
		else:
			if self.__inserter(key,val,self.root):
				self.size += 1
	def __inserter(self,key,val,root): #modi
		if self.less(key,root.key) :
			if root.left == None:
				root.left = self.NodeType(key, val,root) #root是father
				return True
			else:
				return self.__inserter(key,val,root.left)
		elif self.less(root.key,key):
			if root.right == None:
				root.right = self.NodeType(key,val,root)
				return True
			else:
				return self.__inserter(key,val,root.right)
		else:
			root.val = val  #相同关键字，则更新
			return False
	def findMin(self): #寻找最小节点  #modi
		if self.root == None:
			return None
		nd = self.__findMin(self.root)
		return (nd.key,nd.val)
	def __findMin(self,root):
		if root.left == None:
			return root
		else:
			return self.__findMin(root.left )
	def __findMax(self,root):
		if root.right == None:
			return root
		else:
			return self.__findMax(root.right)
	def pop(self,key):
		#删除键为key的元素，返回该元素的值。如果没有这样的元素，则引发异常
		nd = self.__find(key,self.root)
		if nd == None:
			raise Exception("key not found")
		else:
			self.size -= 1
			self.__deleteNode(nd)
	def __deleteNode(self,nd): #删除节点nd
		if nd.left and nd.right: #左右子树都有
			minNd = self.__findMin(nd.right)
			nd.key,nd.val = minNd.key,minNd.val
			self.__deleteNode(minNd)
		elif nd.left:	#只有左子树
			if nd.isLeftChild():
				nd.father.left = nd.left
				nd.left.father = nd.father
			elif nd.isRightChild():
				nd.father.right = nd.left
				nd.left.father = nd.father
			else: #是树根
				self.root = nd.left
				self.root.father = None
		elif nd.right : #只有右子树
			if nd.isRightChild():
				nd.father.right = nd.right
				nd.right.father = nd.father
			elif nd.isLeftChild():
				nd.father.left = nd.right
				nd.right.father = nd.father
			else:
				self.root = nd.right
				self.root.father = None
		else: #nd是叶子
			if nd.isLeftChild():
				nd.father.left = None
			elif nd.isRightChild():
				nd.father.right = None
			else:
				self.root = None
	def inorderTravelSeq(self): #中序遍历生成器
		if self.root == None:
			return
		stack = [[self.root,0]] #0表示self的左子树还没有遍历过
		while len(stack) > 0:
			node = stack[-1]
			if node[0] == None: #node[0]是树节点
				stack.pop()
				continue
			if node[1] == 0: #左子树还没有遍历过
				node[1] = 1
				stack.append([node[0].left,0])
			elif node[1] == 1: #左子树已经遍历过
				yield (node[0].key,node[0].val)
				node[1] = 2
				stack.append([node[0].right, 0])
			else: #右子树也遍历完了
				stack.pop()
	def __contains__(self, key):
		return self.__find(key,self.root) != None
	def __iter__(self): #返回迭代器
		return self.inorderTravelSeq()
	def __getitem__(self,key):
		nd = self.__find(key,self.root)
		if nd == None:
			raise Exception("key not found")
		else:
			return nd.val
	def __setitem__(self, key, value): #
		nd = self.__find(key,self.root)
		if nd == None:
			self.insert(key,value)
		else:
			nd.val = value
	def lower_bound(self, x):
		res = None
		root = self.root
		while root:
			if root.key < x:
				res = (root.key, root.val)
				root = root.right
			elif root.key > x: root = root.left
			else:
				if root.left:
					tmp = root.left
					while tmp.right:
						tmp = tmp.right
					res = (tmp.key, tmp.val)
				break
		return res
	def upper_bound(self, x):
		res = None
		root = self.root
		while root:
			if root.key < x:
				root = root.right
			elif root.key > x:
				res = (root.key, root.val)
				root = root.left
			else:
				if root.right:
					tmp = root.right
					while tmp.left:
						tmp = tmp.left
					res = (tmp.key, tmp.val)
				break
		return res
tree = Tree()
while True:
	try:
		s = input().split()
		if s[0] == "ADD":
			tree[int(s[1])] = int(s[1])
		elif s[0] == "LB":
			print(tree.lower_bound(int(s[1])))
		elif s[0] == "UB":
			print(tree.upper_bound(int(s[1])))
	except:
		break

----author:C_2100010884_丁天巽,1116ms
class TreeNode: #节点类
	#father在删除节点的时候有用,以及找一个节点的后继节点的时候有用
	def __init__(self,key,val,father=None,left=None,right=None):
		self.key,self.val,self.left,self.right ,self.father \
			= key,val,left,right,father
	def isLeftChild(self):
		return self.father and self.father.left == self
	def isRightChild(self):
		return self.father and self.father.right == self
class Tree:
	def __init__(self,NodeType = TreeNode,less=lambda x,y:x<y ):
		self.root,self.size = None,0 #root是树根，size是节点总数
		self.less = less #less是比较函数,
		self.NodeType = NodeType #NodeType是节点类型
	def __find(self,key,root): #私有方法，不宜也不易直接访问
		if self.root == None:
			return None
		if self.less(key,root.key):
			if root.left:
				return self.__find(key,root.left)
			else:
				return None
		elif self.less(root.key,key):
			if root.right:
				return self.__find(key,root.right)
			else:
				return None
		else:
			return root
	def insert(self,key,val): #插入节点 #modi
		if self.root == None:
			self.root = self.NodeType(key,val)
			self.size += 1
		else:
			if self.__inserter(key,val,self.root):
				self.size += 1
	def __inserter(self,key,val,root): #modi
		if self.less(key,root.key) :
			if root.left == None:
				root.left = self.NodeType(key, val,root) #root是father
				return True
			else:
				return self.__inserter(key,val,root.left)
		elif self.less(root.key,key):
			if root.right == None:
				root.right = self.NodeType(key,val,root)
				return True
			else:
				return self.__inserter(key,val,root.right)
		else:
			root.val = val  #相同关键字，则更新
			return False
	def findMin(self): #寻找最小节点  #modi
		if self.root == None:
			return None
		nd = self.__findMin(self.root)
		return (nd.key,nd.val)
	def __findMin(self,root):
		if root.left == None:
			return root
		else:
			return self.__findMin(root.left )
	def __findMax(self,root):
		if root.right == None:
			return root
		else:
			return self.__findMax(root.right)
	def pop(self,key):
		#删除键为key的元素，返回该元素的值。如果没有这样的元素，则引发异常
		nd = self.__find(key,self.root)
		if nd == None:
			raise Exception("key not found")
		else:
			self.size -= 1
			self.__deleteNode(nd)
	def __deleteNode(self,nd): #删除节点nd
		if nd.left and nd.right: #左右子树都有
			minNd = self.__findMin(nd.right)
			nd.key,nd.val = minNd.key,minNd.val
			self.__deleteNode(minNd)
		elif nd.left:	#只有左子树
			if nd.isLeftChild():
				nd.father.left = nd.left
				nd.left.father = nd.father
			elif nd.isRightChild():
				nd.father.right = nd.left
				nd.left.father = nd.father
			else: #是树根
				self.root = nd.left
				self.root.father = None
		elif nd.right : #只有右子树
			if nd.isRightChild():
				nd.father.right = nd.right
				nd.right.father = nd.father
			elif nd.isLeftChild():
				nd.father.left = nd.right
				nd.right.father = nd.father
			else:
				self.root = nd.right
				self.root.father = None
		else: #nd是叶子
			if nd.isLeftChild():
				nd.father.left = None
			elif nd.isRightChild():
				nd.father.right = None
			else:
				self.root = None
	def inorderTravelSeq(self): #中序遍历生成器
		if self.root == None:
			return
		stack = [[self.root,0]] #0表示self的左子树还没有遍历过
		while len(stack) > 0:
			node = stack[-1]
			if node[0] == None: #node[0]是树节点
				stack.pop()
				continue
			if node[1] == 0: #左子树还没有遍历过
				node[1] = 1
				stack.append([node[0].left,0])
			elif node[1] == 1: #左子树已经遍历过
				yield (node[0].key,node[0].val)
				node[1] = 2
				stack.append([node[0].right, 0])
			else: #右子树也遍历完了
				stack.pop()
	def __contains__(self, key):
		return self.__find(key,self.root) != None
	def __iter__(self): #返回迭代器
		return self.inorderTravelSeq()
	def __getitem__(self,key):
		nd = self.__find(key,self.root)
		if nd == None:
			raise Exception("key not found")
		else:
			return nd.val
	def __setitem__(self, key, value): #
		nd = self.__find(key,self.root)
		if nd == None:
			self.insert(key,value)
		else:
			nd.val = value
	def lower_bound(self,target):
		if not self.root:
			return None
		else:
			ptr=self.root
			now=None
			while True:
				if ptr.key < target:
					now=(ptr.key,ptr.val)
					if ptr.right:
						ptr=ptr.right
					else:
						break
				else:
					if ptr.left:
						ptr=ptr.left
					else:
						break
			return now
	def upper_bound(self,target):
		if not self.root:
			return None
		else:
			ptr=self.root
			now=None
			while True:
				if ptr.key>target:
					now = (ptr.key, ptr.val)
					if ptr.left:
						ptr = ptr.left
					else:
						break
				else:
					if ptr.right:
						ptr = ptr.right
					else:
						break
			return now
tree = Tree()
while True:
	try:
		s = input().split()
		if s[0] == "ADD":
			tree[int(s[1])] = int(s[1])
		elif s[0] == "LB":
			print(tree.lower_bound(int(s[1])))
		elif s[0] == "UB":
			print(tree.upper_bound(int(s[1])))
	except:
		break

